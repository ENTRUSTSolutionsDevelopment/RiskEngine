# -*- coding: utf-8 -*-####################################################################################################################### Copyright © 2025 Entrust Solutions Group.# All Rights Reserved.# Threat Risk:#       Corrosion# Variable Type:#       Mitigation# Variable:#       Coating# Variable Description:#       Considers coating type of segment, coated vs not coated pipe#       Evaluates coating condition data to identify areas where coating defects may impact corrosion susceptibility#       Corrosion design manuals may have some tables with coating effectiveness for the area;#       there is a design guide depending on coating type, you need a certain level of CP#       coating installed after mega rule effective date – some mitigation factor to#       anything installed after that date because stricter procedures in place with post construction surveys and#       stricter requirements (more for transmission, but parts still relevant)#       also consider one calls, and second/third party damage - higher likelihood of coating damage#       are coating repairs in GIS? Adjust scoring if they have been repaired, etc.# Units:#       %# Source(s):#       Distribution Mains#           URL: https://ene.maps.arcgis.com/home/item.html?id=cd0407318f46497ea53201ed9b19a884# Field Name(s):#       N/A# Tier 1 Determination Method:#       Requirements documnet Location:#           I:\IN\0 Client\Avangrid\Projects\2309043.00 RGE_NYSEG DIMP Risk Model\2.0 Working Data\DS\#           \geoprocessing functional requirements drafts#           \Geoprocessing Requirements Coating Mitigation.docx#       Use the table below to map the coating type value from the distribution main to#       a undegraded coating mitigation effectiveness value.#       Coating Type Value	Coating Type Term	Undegraded coating mitigation effectiveness#       BAR	                Bare	                0%#       C&W	                Coated and Wrapped	    40%#       CTE	                Coal Tar Epoxy	        40%#       EPX	                Epoxy	                70%#       OTH	                Other	                30%#       SK	                Scotch Kote	            40%#       SW	                Scotchrap	            40%#       WRAP	            Wrapped	                40%#       UNK	                Unknown	                0%#       Null	            None	                0%#       specify the estimated degradation rate using the below table.#       Coating Type	    Expected Design Life (years)#       FBE (epoxy)	            20#       Coal Tar Enamel (CTE)	20#       Asphalt Enamel 	        20#       Coated & Wrapped (C&W)	5#       Scotchkote (SK)	        20#       Scotchrap (SW)	        5#       Wrapped (WRAP)	        5#       Other (OTH)	            5# Tier 1 Determination Method Source(s):#       N/A# Tier 2 Determination Method:#       N/A# Tier 2 Determination Method Source(s):#       N/A# Tier 3 Determination Method:#      N/A# Tier 3 Determination Method Source(s):#       N/A########################################################################################################################import arcpyfrom datetime import date,datetimeimport numpy as npimport math# online distribution mains feature class name,# this feature class will be created in the output GDB if it does not existDIST_MAINS_FC_NAME = "DistMains_Routes"# New fields to addCoatingEffectiveness_fld = "CoatingEffectiveness"ExpectedDesignLife_fld = "ExpectedDesignLife"CoatingAge_fld = "CoatingAge"CoatingMitigation_fld = "CoatingMitigation"DIST_MAINS_FIELD_DESCRIPTION = [[CoatingEffectiveness_fld, "Double", CoatingEffectiveness_fld, None],                                            [ExpectedDesignLife_fld, "Double", ExpectedDesignLife_fld, None],                                             [CoatingAge_fld, "Double", CoatingAge_fld, None],                                            [CoatingMitigation_fld, "Double", CoatingMitigation_fld, None]]class Toolbox:    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "M_Coating"        self.alias = "M_Coating"        # List of tool classes associated with this toolbox        self.tools = [M_Coating]class M_Coating:    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "M_Coating"        self.description = "M_Coating"    def getParameterInfo(self):        """Define the tool parameters."""        # param 0        in_dist_mains = arcpy.Parameter(            displayName="Input Distribution Mains Features", name="in_dist_mains",            datatype="GPFeatureLayer", parameterType="Required",            direction="Input")        # param 1        material_fld = arcpy.Parameter(            displayName="Input Material Type Field",            name="material_fld",            datatype="Field",            parameterType="Required",            direction="Input")        material_fld.parameterDependencies = [in_dist_mains.name]        # param 2        plastic_material_val = arcpy.Parameter(            displayName="Input Plastic Material Type Value",            name="plastic_material_val",            datatype="GPLong",            parameterType="Required",            direction="Input")        # param 3        route_id_fld = arcpy.Parameter(            displayName="Input Dist Mains Unique ID Field Name",            name="route_id_fld",            datatype="GPString",            parameterType="Required",            direction="Input")        # param 4        coating_type_fld = arcpy.Parameter(            displayName="Input Coating Type Field",            name="coating_type_fld",            datatype="Field",            parameterType="Required",            direction="Input")        coating_type_fld.parameterDependencies = [in_dist_mains.name]        # param 5        pipe_install_date_fld = arcpy.Parameter(            displayName="Input Pipe Installation Date Field",            name="pipe_install_date_fld",            datatype="Field",            parameterType="Optional",            direction="Input")        pipe_install_date_fld.parameterDependencies = [in_dist_mains.name]        # param 6        coating_install_date_fld = arcpy.Parameter(            displayName="Input Coating Installation Date Field",            name="coating_install_date_fld",            datatype="Field",            parameterType="Optional",            direction="Input")        coating_install_date_fld.parameterDependencies = [in_dist_mains.name]        # param 7        coating_details = arcpy.Parameter(            displayName="Pipe Coating Details",            name="coating_details",            datatype="GPValueTable",            parameterType="Required",            direction="Input")        coating_details.columns = [ ['GPString', 'Coating Type'],                                    ['GPLong', 'Undegraded Coating Mitigation Effectiveness (%)'],                                    ['GPLong', 'Expected Design Life (Years)']]#         param3.rowCount = 1  # Initial row        params = [in_dist_mains, material_fld, plastic_material_val, route_id_fld, coating_type_fld,                    pipe_install_date_fld, coating_install_date_fld, coating_details]         # param 8        out_gdb = arcpy.Parameter(            displayName="Output GDB",            name="out_gdb",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 9        out_coating_table = arcpy.Parameter(            displayName="Output Coating Table",            name="out_coating_table",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 10        gp_messages = arcpy.Parameter(            displayName="Geoprocessing Messages",            name="gp_messages",            datatype="GPString",            parameterType="Optional",            direction="Output")        # param 11        status = arcpy.Parameter(            displayName="Tool Status",            name="status",            datatype="GPString",            parameterType="Optional",            direction="Output")        # param 12        output_table = arcpy.Parameter(            displayName="Output Linear Events Table",            name="output_table",            datatype="GPTableView",            parameterType="Optional",            direction="Output")        # param 13        portal_ulr = arcpy.Parameter(            displayName="ArcGIS Portal URL",            name="portal_ulr",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 14        portal_username = arcpy.Parameter(            displayName="ArcGIS Portal User Name",            name="portal_username",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 15        portal_password = arcpy.Parameter(            displayName="ArcGIS Portal Password",            name="portal_password",            datatype="GPStringHidden",            parameterType="Optional",            direction="Input")        params += [out_gdb, out_coating_table, gp_messages, status, output_table,                            portal_ulr, portal_username, portal_password]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        return    def signin_portal(self, portal_url, username, password):        """            Login to the ArcGIS Portal to access input data sources            portal_url: ArcGIS Portal URL            username: User name            password: Password        """        if arcpy.GetSigninToken() is None:            try:                if username is not None and  password is not None:                    arcpy.SignInToPortal(portal_url, username, password)                else:                    arcpy.SignInToPortal(portal_url)                arcpy.AddMessage("ArcGIS Portal Login Successful.")            except Exception as e:                arcpy.AddError("ArcGIS Portal Login Failed!."                                "\n{}".format(arcpy.GetMessages(2)))                raise    def preprocess_distmains(self, infc, gdb, dist_mains_routes, unique_fld):        """            Creates online distribution mains features from input distribution mains features            infc: Input distribution mains features            gdb: Path of the geodatabase to save output online distribution mains features            dist_mains_routes: Name of the output online distribution mains feature class            unique_fld: Name of the GUID column to be added to output online distribution mains feature class        """        try:            dist_mains = os.path.join(gdb, "DistMains")            arcpy.AddMessage("Copy Features Dist Mains From Portal...")            from_meas_fld = "FROM_MEASURE"            to_meas_fld = "TO_MEASURE"            arcpy.management.CopyFeatures(in_features=infc,                                          out_feature_class=dist_mains,                                          config_keyword="",                                          spatial_grid_1=None,                                          spatial_grid_2=None,                                          spatial_grid_3=None)            field_list = arcpy.ListFields(dist_mains, from_meas_fld)            if len(field_list) > 0:                arcpy.AddMessage(f"Field '{from_meas_fld}' already exists.")            else:                # Add a new GUID field                arcpy.AddField_management(dist_mains, from_meas_fld, "Double")                arcpy.AddMessage(f"Field '{from_meas_fld}' added successfully.")            arcpy.AddMessage("Calculate Geometry Attributes...")            arcpy.management.CalculateGeometryAttributes(in_features=dist_mains,                                                         geometry_property=to_meas_fld + " LENGTH_GEODESIC",                                                         length_unit="FEET_US",                                                         area_unit="",                                                         coordinate_system=None,                                                         coordinate_format="SAME_AS_INPUT")            field_list = arcpy.ListFields(dist_mains, unique_fld)            if len(field_list) > 0:                arcpy.AddMessage(f"Field '{unique_fld}' already exists.")            else:                # Add a new GUID field                arcpy.AddField_management(dist_mains, unique_fld, "GUID")                arcpy.AddMessage(f"Field '{unique_fld}' added successfully.")            # Create an update cursor to calculate GUID values            with arcpy.da.UpdateCursor(dist_mains, [from_meas_fld, unique_fld]) as cursor:                for row in cursor:                    row[0] = 0                    # Generate a new GUID value                    guid_value = str(uuid.uuid4())                    # Update the row with the new GUID                    row[1] = guid_value                    cursor.updateRow(row)            arcpy.AddMessage(f"GUID values calculated and populated in the '{unique_fld}' field.")            arcpy.AddMessage("Creating route features...")            # create routes            arcpy.lr.CreateRoutes(                in_line_features=dist_mains,                route_id_field=unique_fld,                out_feature_class=dist_mains_routes,                measure_source="TWO_FIELDS",                from_measure_field=from_meas_fld,                to_measure_field=to_meas_fld,                coordinate_priority="UPPER_LEFT",                measure_factor=1,                measure_offset=0,                ignore_gaps="IGNORE",                build_index="INDEX"            )            arcpy.AddMessage("Join Field...")            arcpy.management.JoinField(                in_data=dist_mains_routes,                in_field=unique_fld,                join_table=dist_mains,                join_field=unique_fld,                fields=None,                fm_option="NOT_USE_FM",                field_mapping=None,                index_join_fields="NO_INDEXES"            )            field_list = arcpy.ListFields(dist_mains_routes, unique_fld+"_1")            if len(field_list) > 0:                arcpy.AddMessage("Delete Field...")                arcpy.management.DeleteField(dist_mains_routes,[unique_fld+"_1"])        except Exception as e:            raise    def add_message(self, parameters, msg, gp_msg_no, status_no):        try:            parameters[gp_msg_no].value = parameters[gp_msg_no].valueAsText + "\n " + msg            arcpy.AddMessage(msg)        except Exception as e:            parameters[gp_msg_no].value = parameters[gp_msg_no].valueAsText + "\n " + str(e)            parameters[status_no].value = "Error"            raise    def execute(self, parameters, messages):        """The source code of the tool."""        try:            arcpy.env.overwriteOutput = True            dist_mains = parameters[0].value            material_fld = parameters[1].valueAsText            plastic_material_val = int(parameters[2].value)            route_id_fld = parameters[3].valueAsText            coating_type_fld = parameters[4].valueAsText            pipe_install_date_fld = parameters[5].valueAsText            coating_install_date_fld = parameters[6].valueAsText            if not coating_install_date_fld and not pipe_install_date_fld:                self.add_message(parameters, "Date field not found!...", gp_msg_no, status_no)                return            coating_details = parameters[7].value            out_gdb_name = parameters[8].valueAsText            out_coating_table = parameters[9].valueAsText            gp_msg_no = 10            status_no = 11            parameters[12].value = os.path.join(out_gdb_name, out_coating_table)            portal_ulr = parameters[13].value            portal_username = parameters[14].value            portal_password = parameters[15].value            linear_events_table = os.path.join(out_gdb_name, out_coating_table)            linear_events_fc = os.path.join(out_gdb_name, out_coating_table + "_FC")#             dist_mains_routes =  os.path.join(out_gdb_name, "DistMains_Routes")            dist_mains_routes =  os.path.join(out_gdb_name, DIST_MAINS_FC_NAME)            parameters[gp_msg_no].value = "Starting..."            parameters[status_no].value = ""            coating_details_arr = {}            for row in coating_details:                if row[0]:                    coating_details_arr[row[0].upper()] = {                                    CoatingEffectiveness_fld: int(row[1]),                                    ExpectedDesignLife_fld: int(row[2])}            # sign in to portal            self.signin_portal(portal_ulr, portal_username, portal_password)            # check in dist mains exist in the file geodatabase            self.add_message(parameters, "Checking Input Dist Mains...", gp_msg_no, status_no)            if not arcpy.Exists(dist_mains_routes):                self.preprocess_distmains(dist_mains, out_gdb_name, dist_mains_routes, route_id_fld)            # select non plastic distribution main            self.add_message(parameters, "Select Layer By Attribute Metallic Mains...", gp_msg_no, status_no)#             whereclause = f"{material_fld} not in ({plastic_material_val})"#             whereclause = f"{material_fld} NOT IN ({plastic_material_val})"#             whereclause = "{} ? ({})".format(material_fld, plastic_material_val)#             whereclause = whereclause.replace("?" , "NOT IN")#            dist_metallic = arcpy.management.SelectLayerByAttribute(in_layer_or_view=dist_mains_routes,                                    selection_type="NEW_SELECTION",                                    where_clause=f"{material_fld} NOT IN ({plastic_material_val})",                                    invert_where_clause=None)            self.add_message(parameters, "Copy Features Metallic Mains...", gp_msg_no, status_no)            arcpy.management.CopyFeatures(in_features=dist_metallic,                                            out_feature_class=linear_events_fc,                                            config_keyword="",                                            spatial_grid_1=None,                                            spatial_grid_2=None,                                            spatial_grid_3=None)             # add fields to dist mains            self.add_message(parameters, "Add Fields Dist Mains...", gp_msg_no, status_no)            arcpy.management.AddFields(linear_events_fc, DIST_MAINS_FIELD_DESCRIPTION)            if coating_install_date_fld:                date_fld = coating_install_date_fld            else:                date_fld = pipe_install_date_fld            whereclause = f"{date_fld} IS NOT NULL"            sqlclause = (None, f'ORDER BY {date_fld}')            old_install_date = None            with arcpy.da.SearchCursor(linear_events_fc, [date_fld], where_clause = whereclause, sql_clause=sqlclause) as cursor:                for row in cursor:                    old_install_date = row[0]                    break            # Update Dist mains            self.add_message(parameters, "Updating Dist Mains...", gp_msg_no, status_no)            flds = [date_fld, coating_type_fld, CoatingEffectiveness_fld, ExpectedDesignLife_fld,                        CoatingAge_fld, CoatingMitigation_fld]            with arcpy.da.UpdateCursor(linear_events_fc, flds) as cursor:                for row in cursor:                    if row[0]:                        install_date =  row[0].date()                    else:                        install_date = old_install_date.date()                    coating_type = row[1]                    if not coating_type:                        coating_type = "Default"#                     time_difference = date.today().year - install_date.year                    time_difference = (date.today() - install_date).days                    coating_age = round(time_difference / 365.25, 2)                    row[4] = coating_age                    if coating_type.upper() in coating_details_arr:                        values = coating_details_arr[coating_type.upper()]                        row[2] = undegraded_coating_effect = values[CoatingEffectiveness_fld]                        row[3] = l_design = values[ExpectedDesignLife_fld]                    else:                        row[2] = 30                        row[3] = l_design = 5                        undegraded_coating_effect = 30                    exponent = ((-0.6931471 * (coating_age**2)) / (l_design**2))                    row[5] = undegraded_coating_effect *  math.exp(exponent)                    cursor.updateRow(row)            self.add_message(parameters, "Creating output linear events table...", gp_msg_no, status_no)            arcpy.conversion.ExportTable(in_table=linear_events_fc,out_table=linear_events_table)            self.add_message(parameters, "Completed!", gp_msg_no, status_no)            parameters[status_no].value = "Success"        except Exception as e:            parameters[status_no].value = "Error"            self.add_message(parameters, str(e), gp_msg_no, status_no)            raise        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return