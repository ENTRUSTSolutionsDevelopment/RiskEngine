# -*- coding: utf-8 -*-####################################################################################################################### Copyright Â© 2025 Entrust Solutions Group.# All Rights Reserved.# Threat Risk:#       Natural Forces# Variable Type:#       Exposure# Variable:#       Seismic Activity# Variable Description:#       Pipe segment susceptible to Seismic Activity - utilizes FEMA data to estimate susceptibility# Units:#       events/mi-yr# Source:#       Distribution Mains#       URL: https://ene.maps.arcgis.com/home/item.html?id=cd0407318f46497ea53201ed9b19a884# Source:#       National Risk Index Census Tracts#       URL: https://www.arcgis.com/home/item.html?id=9da4eeb936544335a6db0cd7a8448a51# Field Name(s):#       Earthquake - Annualized Frequency# Tier 1 Determination Method:#       N/A# Tier 1 Determination Method Source(s):#       N/A# Tier 2 Determination Method:#       Calculate by year per pipe mileage, apply calculated events/mi-year value#       Calculated events/mi-year is equal to annualized frequency by total mileage of pipe that#       intersected with census tract polygon# Tier 2 Determination Method Source(s):#       Distribution Main: https://ene.maps.arcgis.com/home/item.html?id=cd0407318f46497ea53201ed9b19a884#       FEMA Census Tracts: https://www.arcgis.com/home/item.html?id=9da4eeb936544335a6db0cd7a8448a51# Tier 3 Determination Method:#       if no census tract polygon is available and annualized frequncy is not available,#       assume the average annualized frequency on a per division basis.# Tier 3 Determination Method Source(s):#       Distribution Main: https://ene.maps.arcgis.com/home/item.html?id=cd0407318f46497ea53201ed9b19a884#       FEMA Census Tracts: https://www.arcgis.com/home/item.html?id=9da4eeb936544335a6db0cd7a8448a51#######################################################################################################################import arcpy# online distribution mains feature class name,# this feature class will be created in the output GDB if it does not existDIST_MAINS_FC_NAME = "DistMains_Routes"# Name of the natural forces feature class to be stores in fgdbNATURAL_FORCES_FC_NAME = "NaturalForces_SensusTracts"# New fields to addearthquake_events_fld = "Earthquake_Events"earthquake_events_mile_fld = "Earthquake_EventsPerMile"MAINS_NATURAL_FIELD_DESCRIPTION = [                [earthquake_events_fld, "Double", earthquake_events_fld, None],                [earthquake_events_mile_fld, "Double",earthquake_events_mile_fld, None]              ]class Toolbox:    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "E_SeismicActivity"        self.alias = "E_SeismicActivity"        # List of tool classes associated with this toolbox        self.tools = [E_SeismicActivity]class E_SeismicActivity:    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "E_SeismicActivity"        self.description = "E_SeismicActivity"    def getParameterInfo(self):        """Define the tool parameters."""        params = []        # param 0        in_dist_mains = arcpy.Parameter(            displayName="Input Distribution Mains Features", name="in_dist_mains",            datatype="GPFeatureLayer", parameterType="Required",            direction="Input")        # param 1        route_id_fld = arcpy.Parameter(            displayName="Input Route ID Field",            name="route_id_fld",            datatype="Field",            parameterType="Required",            direction="Input")        route_id_fld.parameterDependencies = [in_dist_mains.name]        # param 2        in_census_tracts = arcpy.Parameter(            displayName="Input Census Tracts Features", name="in_census_tracts",            datatype="GPFeatureLayer", parameterType="Required",            direction="Input")         # param 3        earthquake_fld = arcpy.Parameter(            displayName="Input Seismic Activity (Earthquake) Annualized Frequency Field",            name="earthquake_fld",            datatype="Field",            parameterType="Required",            direction="Input")        earthquake_fld.parameterDependencies = [in_census_tracts.name]        params = [in_dist_mains, route_id_fld, in_census_tracts,                   earthquake_fld]        # param 4        out_gdb = arcpy.Parameter(            displayName="Output GDB",            name="out_gdb",            datatype="GPString",            parameterType="Optional",            direction="Input")#         out_gdb.value = r"C:\temp\RiskEngine.gdb"        # param 5        out_nat_forces_table = arcpy.Parameter(            displayName="Output Seismic Activity Table",            name="out_nat_forces_table",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 6        gp_messages = arcpy.Parameter(            displayName="Geoprocessing Messages",            name="gp_messages",            datatype="GPString",            parameterType="Optional",            direction="Output")        # param 7        status = arcpy.Parameter(            displayName="Tool Status",            name="status",            datatype="GPString",            parameterType="Optional",            direction="Output")        # param 8        output_table = arcpy.Parameter(            displayName="Output Linear Events Table",            name="output_table",            datatype="GPTableView",            parameterType="Optional",            direction="Output")        # param 9        portal_ulr = arcpy.Parameter(            displayName="ArcGIS Portal URL",            name="portal_ulr",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 10        portal_username = arcpy.Parameter(            displayName="ArcGIS Portal User Name",            name="portal_username",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 11        portal_password = arcpy.Parameter(            displayName="ArcGIS Portal Password",            name="portal_password",            datatype="GPStringHidden",            parameterType="Optional",            direction="Input")        params += [out_gdb, out_nat_forces_table, gp_messages, status, output_table,                            portal_ulr, portal_username, portal_password]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        return    def signin_portal(self, portal_url, username, password):        """            Login to the ArcGIS Portal to access input data sources            portal_url: ArcGIS Portal URL            username: User name            password: Password        """        if arcpy.GetSigninToken() is None:            try:                if username is not None and  password is not None:                    arcpy.SignInToPortal(portal_url, username, password)                else:                    arcpy.SignInToPortal(portal_url)                arcpy.AddMessage("ArcGIS Portal Login Successful.")            except Exception as e:                arcpy.AddError("ArcGIS Portal Login Failed!."                                "\n{}".format(arcpy.GetMessages(2)))                raise    def preprocess_distmains(self, infc, gdb, dist_mains_routes, unique_fld):        """            Creates online distribution mains features from input distribution mains features            infc: Input distribution mains features            gdb: Path of the geodatabase to save output online distribution mains features            dist_mains_routes: Name of the output online distribution mains feature class            unique_fld: Name of the GUID column to be added to output online distribution mains feature class        """        try:            dist_mains = os.path.join(gdb, "DistMains")            arcpy.AddMessage("Copy Features Dist Mains From Portal...")            from_meas_fld = "FROM_MEASURE"            to_meas_fld = "TO_MEASURE"            arcpy.management.CopyFeatures(in_features=infc,                                          out_feature_class=dist_mains,                                          config_keyword="",                                          spatial_grid_1=None,                                          spatial_grid_2=None,                                          spatial_grid_3=None)            field_list = arcpy.ListFields(dist_mains, from_meas_fld)            if len(field_list) > 0:                arcpy.AddMessage(f"Field '{from_meas_fld}' already exists.")            else:                # Add a new GUID field                arcpy.AddField_management(dist_mains, from_meas_fld, "Double")                arcpy.AddMessage(f"Field '{from_meas_fld}' added successfully.")            arcpy.AddMessage("Calculate Geometry Attributes...")            arcpy.management.CalculateGeometryAttributes(in_features=dist_mains,                                                         geometry_property=to_meas_fld + " LENGTH_GEODESIC",                                                         length_unit="FEET_US",                                                         area_unit="",                                                         coordinate_system=None,                                                         coordinate_format="SAME_AS_INPUT")            field_list = arcpy.ListFields(dist_mains, unique_fld)            if len(field_list) > 0:                arcpy.AddMessage(f"Field '{unique_fld}' already exists.")            else:                # Add a new GUID field                arcpy.AddField_management(dist_mains, unique_fld, "GUID")                arcpy.AddMessage(f"Field '{unique_fld}' added successfully.")            # Create an update cursor to calculate GUID values            with arcpy.da.UpdateCursor(dist_mains, [from_meas_fld, unique_fld]) as cursor:                for row in cursor:                    row[0] = 0                    # Generate a new GUID value                    guid_value = str(uuid.uuid4())                    # Update the row with the new GUID                    row[1] = guid_value                    cursor.updateRow(row)            arcpy.AddMessage(f"GUID values calculated and populated in the '{unique_fld}' field.")            arcpy.AddMessage("Creating route features...")            # create routes            arcpy.lr.CreateRoutes(                in_line_features=dist_mains,                route_id_field=unique_fld,                out_feature_class=dist_mains_routes,                measure_source="TWO_FIELDS",                from_measure_field=from_meas_fld,                to_measure_field=to_meas_fld,                coordinate_priority="UPPER_LEFT",                measure_factor=1,                measure_offset=0,                ignore_gaps="IGNORE",                build_index="INDEX"            )            arcpy.AddMessage("Join Field...")            arcpy.management.JoinField(                in_data=dist_mains_routes,                in_field=unique_fld,                join_table=dist_mains,                join_field=unique_fld,                fields=None,                fm_option="NOT_USE_FM",                field_mapping=None,                index_join_fields="NO_INDEXES"            )            field_list = arcpy.ListFields(dist_mains_routes, unique_fld+"_1")            if len(field_list) > 0:                arcpy.AddMessage("Delete Field...")                arcpy.management.DeleteField(dist_mains_routes,[unique_fld+"_1"])        except Exception as e:            raise    def add_message(self, parameters, msg, gp_msg_no, status_no):        try:            parameters[gp_msg_no].value = parameters[gp_msg_no].valueAsText + "\n " + msg            arcpy.AddMessage(msg)        except Exception as e:            parameters[gp_msg_no].value = parameters[gp_msg_no].valueAsText + "\n " + str(e)            parameters[status_no].value = "Error"            raise    def execute(self, parameters, messages):        """The source code of the tool."""        try:            arcpy.env.overwriteOutput = True            dist_mains = parameters[0].value            route_id_fld = parameters[1].valueAsText            in_census_tracts = parameters[2].value            earthquake_fld = parameters[3].valueAsText            out_gdb_name = parameters[4].valueAsText            out_nat_forces_table_name = parameters[5].valueAsText            gp_msg_no = 6            status_no = 7            parameters[8].value = os.path.join(out_gdb_name, out_nat_forces_table_name)            portal_ulr = parameters[9].value            portal_username = parameters[10].value            portal_password = parameters[11].value            out_nat_forces_table = os.path.join(out_gdb_name, out_nat_forces_table_name)            linear_events_fc = os.path.join(out_gdb_name, out_nat_forces_table_name + "_FC")            dist_mains_routes =  os.path.join(out_gdb_name, DIST_MAINS_FC_NAME)            parameters[gp_msg_no].value = "Starting..."            parameters[status_no].value = ""            temp_dist_mains = os.path.join(out_gdb_name, "E_NF_DistMains")            temp_census_layer = os.path.join(out_gdb_name, NATURAL_FORCES_FC_NAME)             # sign in to portal            self.signin_portal(portal_ulr, portal_username, portal_password)            # check in dist mains exist in the file geodatabase            # if not, create online distribution feature class            self.add_message(parameters, "Checking Input Dist Mains...", gp_msg_no, status_no)            if not arcpy.Exists(dist_mains_routes):                self.preprocess_distmains(dist_mains, out_gdb_name, dist_mains_routes, route_id_fld)            self.add_message(parameters,"Copy Features Mains...", gp_msg_no, status_no)            arcpy.management.CopyFeatures(in_features=dist_mains_routes,                                            out_feature_class=temp_dist_mains,                                            config_keyword="",                                            spatial_grid_1=None,                                            spatial_grid_2=None,                                            spatial_grid_3=None)            if not arcpy.Exists(temp_census_layer):                self.add_message(parameters,"Copy Features Census Tracts ...", gp_msg_no, status_no)                arcpy.management.CopyFeatures(in_features=in_census_tracts,                                                out_feature_class=temp_census_layer,                                                config_keyword="",                                                spatial_grid_1=None,                                                spatial_grid_2=None,                                                spatial_grid_3=None)            nat_forces_arr = arcpy.da.FeatureClassToNumPyArray(in_table=temp_census_layer,                                                    field_names =('OBJECTID',                                                                  earthquake_fld),                                                    null_value=-9999)            self.add_message(parameters,"Pairwise Intersect Mains and Census Tracts...", gp_msg_no, status_no)            inlayers = [temp_dist_mains, temp_census_layer]            arcpy.analysis.PairwiseIntersect(in_features=inlayers,                            out_feature_class=linear_events_fc,                            join_attributes="ONLY_FID",                            cluster_tolerance=None,                            output_type="LINE")            self.add_message(parameters,"Calculate Geometry Attributes...", gp_msg_no, status_no)            arcpy.management.CalculateGeometryAttributes(in_features=linear_events_fc,                            geometry_property="Length_Miles LENGTH_GEODESIC",                            length_unit="MILES_US",                            area_unit="",                            coordinate_system=None,                            coordinate_format="SAME_AS_INPUT")            self.add_message(parameters,"Adding Fields...", gp_msg_no, status_no)            arcpy.management.AddFields(linear_events_fc, MAINS_NATURAL_FIELD_DESCRIPTION)            fields = ["Length_Miles", "FID_" + NATURAL_FORCES_FC_NAME,                           earthquake_events_fld, earthquake_events_mile_fld]            self.add_message(parameters,"Calculating Values...", gp_msg_no, status_no)            with arcpy.da.UpdateCursor(linear_events_fc, fields) as cursor:                for row in cursor:                    length = row[0]                    nat_froces_objid = row[1]                    result = nat_forces_arr[nat_forces_arr["OBJECTID"] == nat_froces_objid]                    earthq = result[earthquake_fld]                    if earthq <= 0:                        earthq = 0.0                    row[2] = float(earthq)                    row[3] = float(earthq / length)                    cursor.updateRow(row)            self.add_message(parameters,"Creating output linear events table...", gp_msg_no, status_no)            arcpy.lr.LocateFeaturesAlongRoutes(in_features=linear_events_fc,                                            in_routes=temp_dist_mains,                                            route_id_field=route_id_fld,                                            radius_or_tolerance="0 Meters",                                            out_table=out_nat_forces_table,                                            out_event_properties=route_id_fld + "; LINE; FROM_MEASURE; TO_MEASURE",                                            route_locations="FIRST",                                            distance_field="DISTANCE",                                            zero_length_events="ZERO",                                            in_fields="FIELDS",                                            m_direction_offsetting="M_DIRECTON")            self.add_message(parameters,"Finished!", gp_msg_no, status_no)            parameters[status_no].value = "Success"        except Exception as e:            self.add_message(parameters,str(e), gp_msg_no, status_no)            parameters[status_no].value = "Error"            raise        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return