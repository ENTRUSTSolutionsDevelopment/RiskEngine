# -*- coding: utf-8 -*-####################################################################################################################### Copyright Â© 2025 Entrust Solutions Group.# All Rights Reserved.# Threat Risk:#       Corrosion# Variable Type:#       Exposure# Variable:#       Atmospheric corrosion# Variable Description:#       Applicable to above grade pipe/components.#       Uses mpy degradation estimate considering moisture in air, temperature, and airborne chemicals.#       Above ground metallic only - need corrosiong input on rates# Units:#       mpy# Source:#       Distribution Mains#           URL: https://ene.maps.arcgis.com/home/item.html?id=cd0407318f46497ea53201ed9b19a884# Source:#       National Risk Index Census Tracts#       URL: https://www.arcgis.com/home/item.html?id=9da4eeb936544335a6db0cd7a8448a51# Field Name(s):#       N/A# Tier 1 Determination Method:#       if atmospheric corrosion measurements are available, calculate mpy from: mils wall loss / (current date - installation date in years).#       NO corrosion measurements AVAILABLE FROM CLIENT. NOT TO BE DEVELOPED FOR INITIAL SCOPE.# Tier 1 Determination Method Source(s):#       corrosion measurements#       NO corrosion measurements AVAILABLE FROM CLIENT. NOT TO BE DEVELOPED FOR INITIAL SCOPE.# Tier 2 Determination Method:#       if material is metallic and Installation_Method == above grade, atmosphere exposure: 2 mpy#       else, atmosphere exposure: 0 mpy# Tier 2 Determination Method Source(s):#       Distribution Main: https://ene.maps.arcgis.com/home/item.html?id=cd0407318f46497ea53201ed9b19a884#       Service2025, GasValveDist2025# Tier 3 Determination Method:#      if Installation_Method is unknown and material is unknown or metallic,#       assume below grade and set atmospheric exposure term to 0 mpy (more conservative).# Tier 3 Determination Method Source(s):#       Distribution Main: https://ene.maps.arcgis.com/home/item.html?id=cd0407318f46497ea53201ed9b19a884########################################################################################################################import arcpyimport numpy as npimport osimport uuid# online distribution mains feature class name,# this feature class will be created in the output GDB if it does not existDIST_MAINS_FC_NAME = "DistMains_Routes"# New fields to addatmospheric_corrosion_fld = "Atmospheric_Corrosion"DIST_MAINS_FIELD_DESCRIPTION = [[atmospheric_corrosion_fld, "Double", atmospheric_corrosion_fld, None]]class Toolbox:    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [E_AtmosphericCorrosion]class E_AtmosphericCorrosion:    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "E_AtmosphericCorrosion"        self.description = "E_AtmosphericCorrosion"    def getParameterInfo(self):        """Define the tool parameters."""        params = []        # param 0        in_dist_mains = arcpy.Parameter(            displayName="Input Distribution Mains Features", name="in_dist_mains",            datatype="GPFeatureLayer", parameterType="Required",            direction="Input")         # param 1        above_ground_fld = arcpy.Parameter(            displayName="Input Above Ground Field",            name="above_ground_fld",            datatype="Field",            parameterType="Required",            direction="Input")        above_ground_fld.parameterDependencies = [in_dist_mains.name]        # param 2        material_fld = arcpy.Parameter(            displayName="Input Material Type Field",            name="material_fld",            datatype="Field",            parameterType="Required",            direction="Input")        material_fld.parameterDependencies = [in_dist_mains.name]        # param 3        plastic_material_val = arcpy.Parameter(            displayName="Input Plastic Material Type Value",            name="plastic_material_val",            datatype="GPLong",            parameterType="Required",            direction="Input")        # param 4        route_id_fld = arcpy.Parameter(            displayName="Input Dist Mains Unique ID Field Name",            name="route_id_fld",            datatype="GPString",            parameterType="Required",            direction="Input")        # param 5        out_gdb = arcpy.Parameter(            displayName="Output GDB",            name="out_gdb",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 6        out_atm_corr_table = arcpy.Parameter(            displayName="Output Atmospheric Corrosion Table",            name="out_atm_corr_table",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 7        gp_messages = arcpy.Parameter(            displayName="Geoprocessing Messages",            name="gp_messages",            datatype="GPString",            parameterType="Optional",            direction="Output")        # param 8        status = arcpy.Parameter(            displayName="Tool Status",            name="status",            datatype="GPString",            parameterType="Optional",            direction="Output")         # param 9        output_table = arcpy.Parameter(            displayName="Output Linear Events Table",            name="output_table",            datatype="GPTableView",            parameterType="Optional",            direction="Output")        # param 10        portal_ulr = arcpy.Parameter(            displayName="ArcGIS Portal URL",            name="portal_ulr",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 11        portal_username = arcpy.Parameter(            displayName="ArcGIS Portal User Name",            name="portal_username",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 12        portal_password = arcpy.Parameter(            displayName="ArcGIS Portal Password",            name="portal_password",            datatype="GPStringHidden",            parameterType="Optional",            direction="Input")        params = [in_dist_mains, above_ground_fld, material_fld, plastic_material_val, route_id_fld,                    out_gdb, out_atm_corr_table,                    gp_messages, status,                    output_table, portal_ulr, portal_username, portal_password                    ]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        return    def signin_portal(self, portal_url, username, password):        """            Login to the ArcGIS Portal to access input data sources            portal_url: ArcGIS Portal URL            username: User name            password: Password        """        if arcpy.GetSigninToken() is None:            try:                if username is not None and  password is not None:                    arcpy.SignInToPortal(portal_url, username, password)                else:                    arcpy.SignInToPortal(portal_url)                arcpy.AddMessage("ArcGIS Portal Login Successful.")            except Exception as e:                arcpy.AddError("ArcGIS Portal Login Failed!."                                "\n{}".format(arcpy.GetMessages(2)))                raise    def preprocess_distmains(self, infc, gdb, dist_mains_routes, unique_fld):        """            Creates online distribution mains features from input distribution mains features            infc: Input distribution mains features            gdb: Path of the geodatabase to save output online distribution mains features            dist_mains_routes: Name of the output online distribution mains feature class            unique_fld: Name of the GUID column to be added to output online distribution mains feature class        """        try:            dist_mains = os.path.join(gdb, "DistMains")            arcpy.AddMessage("Copy Features Dist Mains From Portal...")            from_meas_fld = "FROM_MEASURE"            to_meas_fld = "TO_MEASURE"            arcpy.management.CopyFeatures(in_features=infc,                                          out_feature_class=dist_mains,                                          config_keyword="",                                          spatial_grid_1=None,                                          spatial_grid_2=None,                                          spatial_grid_3=None)            field_list = arcpy.ListFields(dist_mains, from_meas_fld)            if len(field_list) > 0:                arcpy.AddMessage(f"Field '{from_meas_fld}' already exists.")            else:                # Add a new GUID field                arcpy.AddField_management(dist_mains, from_meas_fld, "Double")                arcpy.AddMessage(f"Field '{from_meas_fld}' added successfully.")            arcpy.AddMessage("Calculate Geometry Attributes...")            arcpy.management.CalculateGeometryAttributes(in_features=dist_mains,                                                         geometry_property=to_meas_fld + " LENGTH_GEODESIC",                                                         length_unit="FEET_US",                                                         area_unit="",                                                         coordinate_system=None,                                                         coordinate_format="SAME_AS_INPUT")            field_list = arcpy.ListFields(dist_mains, unique_fld)            if len(field_list) > 0:                arcpy.AddMessage(f"Field '{unique_fld}' already exists.")            else:                # Add a new GUID field                arcpy.AddField_management(dist_mains, unique_fld, "GUID")                arcpy.AddMessage(f"Field '{unique_fld}' added successfully.")            # Create an update cursor to calculate GUID values            with arcpy.da.UpdateCursor(dist_mains, [from_meas_fld, unique_fld]) as cursor:                for row in cursor:                    row[0] = 0                    # Generate a new GUID value                    guid_value = str(uuid.uuid4())                    # Update the row with the new GUID                    row[1] = guid_value                    cursor.updateRow(row)            arcpy.AddMessage(f"GUID values calculated and populated in the '{unique_fld}' field.")            arcpy.AddMessage("Creating route features...")            # create routes            arcpy.lr.CreateRoutes(                in_line_features=dist_mains,                route_id_field=unique_fld,                out_feature_class=dist_mains_routes,                measure_source="TWO_FIELDS",                from_measure_field=from_meas_fld,                to_measure_field=to_meas_fld,                coordinate_priority="UPPER_LEFT",                measure_factor=1,                measure_offset=0,                ignore_gaps="IGNORE",                build_index="INDEX"            )            arcpy.AddMessage("Join Field...")            arcpy.management.JoinField(                in_data=dist_mains_routes,                in_field=unique_fld,                join_table=dist_mains,                join_field=unique_fld,                fields=None,                fm_option="NOT_USE_FM",                field_mapping=None,                index_join_fields="NO_INDEXES"            )            field_list = arcpy.ListFields(dist_mains_routes, unique_fld+"_1")            if len(field_list) > 0:                arcpy.AddMessage("Delete Field...")                arcpy.management.DeleteField(dist_mains_routes,[unique_fld+"_1"])        except Exception as e:            raise    def add_message(self, parameters, msg, gp_msg_no, status_no):        try:            parameters[gp_msg_no].value = parameters[gp_msg_no].valueAsText + "\n " + msg            arcpy.AddMessage(msg)        except Exception as e:            parameters[gp_msg_no].value = parameters[gp_msg_no].valueAsText + "\n " + str(e)            parameters[status_no].value = "Error"            raise    def execute(self, parameters, messages):        """The source code of the tool."""        try:            arcpy.env.overwriteOutput = True            dist_mains = parameters[0].value            above_ground_fld = parameters[1].valueAsText            material_fld = parameters[2].valueAsText            plastic_material_val = int(parameters[3].value)            route_id_fld = parameters[4].valueAsText            out_gdb_name = parameters[5].valueAsText            output_table_name = parameters[6].valueAsText            parameters[9].value = os.path.join(out_gdb_name, output_table_name)            portal_ulr = parameters[10].value            portal_username = parameters[11].value            portal_password = parameters[12].value            linear_events_table = os.path.join(out_gdb_name, output_table_name)            linear_events_fc = os.path.join(out_gdb_name, output_table_name + "_FC")            dist_mains_routes =  os.path.join(out_gdb_name, "DistMains_Routes")            gp_msg_no = 7            status_no = 8            parameters[gp_msg_no].value = "Starting..."            parameters[status_no].value = ""            # sign in to portal            self.signin_portal(portal_ulr, portal_username, portal_password)            # check in dist mains exist in the file geodatabase            if not arcpy.Exists(dist_mains_routes):                # sign in to portal#                 self.signin_portal(portal_ulr, portal_username, portal_password)                self.preprocess_distmains(dist_mains, out_gdb_name, dist_mains_routes, route_id_fld)            # select non plastic distribution main            self.add_message(parameters, "Select Layer By Attribute NonPlastic Mains...", gp_msg_no, status_no)            whereclause = f"{material_fld} NOT IN ({plastic_material_val})"            dist_plastic = arcpy.management.SelectLayerByAttribute(in_layer_or_view=dist_mains,                                    selection_type="NEW_SELECTION",                                    where_clause=whereclause,                                    invert_where_clause=None)            self.add_message(parameters, "Copy Features NonPlastic Mains...", gp_msg_no, status_no)            arcpy.management.CopyFeatures(in_features=dist_plastic[0],                                            out_feature_class=linear_events_fc,                                            config_keyword="",                                            spatial_grid_1=None,                                            spatial_grid_2=None,                                            spatial_grid_3=None)            self.add_message(parameters, "Add Fields NonPlastic Mains...", gp_msg_no, status_no)            arcpy.management.AddFields(linear_events_fc, DIST_MAINS_FIELD_DESCRIPTION)            self.add_message(parameters,"Updating Atmospheric Corrosion...", gp_msg_no, status_no)            fields = [above_ground_fld,atmospheric_corrosion_fld]            with arcpy.da.UpdateCursor(linear_events_fc, fields) as cursor:                for row in cursor:                    if row[0] is not None  and row[0] == 'Yes':                        row[1] = 2                    else:                        row[1] = 0                    cursor.updateRow(row)            self.add_message(parameters, "Creating output linear events table...", gp_msg_no, status_no)            arcpy.conversion.ExportTable(in_table=linear_events_fc, out_table=linear_events_table)            self.add_message(parameters,"Finished!", gp_msg_no, status_no)            parameters[status_no].value = "Success"        except Exception as e:            parameters[status_no].value = "Error"            raise        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return