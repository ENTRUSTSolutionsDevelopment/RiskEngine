# -*- coding: utf-8 -*-####################################################################################################################### Copyright Â© 2025 Entrust Solutions Group.# All Rights Reserved.# Threat Risk:#       Materials/Welds/Joints# Variable Type:#       Exposure# Variable:#       Vintage Plastics# Variable Description:#       Vintage Plastics# Units:#       events/mi-yr# Source:#       Distribution Mains#           URL: https://ene.maps.arcgis.com/home/item.html?id=cd0407318f46497ea53201ed9b19a884#       SME Input Survey#           URL: https://ene.maps.arcgis.com/home/item.html?id=2a1d1820d40a42c09c2deadf27a59b78# Tier 1 Determination Method:#       Select mains where Material in (5). Then calculate its geodesic length per division,#       that will be division total mileage.#       Select records in previous subselection where install date is before '1/1/1970'.#       Sum this mileage and divide by total mileage of respective division.#       Insufficent data to derive Vintage Plastic Failure Rates. NOT TO BE DEVELOPED FOR INITIAL SCOPE.# Tier 1 Determination Method Source(s):#       Dist_Main#       Insufficent data to derive Vintage Plastic Failure Rates. NOT TO BE DEVELOPED FOR INITIAL SCOPE.# Tier 2 Determination Method:#       Insufficent data to derive Vintage Plastic Failure Rates. NOT TO BE DEVELOPED FOR INITIAL SCOPE.# Tier 2 Determination Method Source(s):#       Insufficent data to derive Vintage Plastic Failure Rates. NOT TO BE DEVELOPED FOR INITIAL SCOPE.# Tier 3 Determination Method:#       SME Input Survey: Vintage Plastics# Tier 3 Determination Method Source(s):#       SME Input Survey########################################################################################################################import arcpyimport numpy as np# online distribution mains feature class name,# this feature class will be created in the output GDB if it does not existDIST_MAINS_FC_NAME = "DistMains_Routes"# new field name to be added to the output events tableNEW_FIELD_NAME = "E_VintagePlasticsLikelihood"DIST_MAINS_FIELD_DESCRIPTION = [[NEW_FIELD_NAME, "Float", NEW_FIELD_NAME, None]]class Toolbox:    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "E_VintagePlastics"        self.alias = "E_VintagePlastics"        # List of tool classes associated with this toolbox        self.tools = [E_VintagePlastics]class E_VintagePlastics:    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "E_VintagePlastics"        self.description = "E_VintagePlastics"    def getParameterInfo(self):        """Define the tool parameters."""         # param 0        in_dist_mains = arcpy.Parameter(            displayName="Input Distribution Mains Features", name="in_dist_mains",            datatype="GPFeatureLayer", parameterType="Required",            direction="Input")        # param 1        material_fld = arcpy.Parameter(            displayName="Input Material Type Field",            name="material_fld",            datatype="Field",            parameterType="Required",            direction="Input")        material_fld.parameterDependencies = [in_dist_mains.name]        # param 2        plastic_material_val = arcpy.Parameter(            displayName="Input Plastic Material Type Value",            name="plastic_material_val",            datatype="GPLong",            parameterType="Required",            direction="Input")        # param 3        route_id_fld = arcpy.Parameter(            displayName="Input Dist Mains Unique ID Field Name",            name="route_id_fld",            datatype="GPString",            parameterType="Required",            direction="Input")        # param 4        div_name_fld = arcpy.Parameter(            displayName="Input Division Name Field",            name="div_name_fld",            datatype="Field",            parameterType="Required",            direction="Input")        div_name_fld.parameterDependencies = [in_dist_mains.name]        # param 5        in_sme_survey_rows = arcpy.Parameter(            displayName="Input SME Survey Rows", name="in_sme_survey_rows",            datatype=["GPTableView", "GPFeatureLayer"], parameterType="Optional",            direction="Input")         # param 6        sme_variable_fld = arcpy.Parameter(            displayName="Input SME Survey Variable Name Field",            name="sme_variable_fld",            datatype="Field",            parameterType="Optional",            direction="Input")        sme_variable_fld.parameterDependencies = [in_sme_survey_rows.name]        # param 7        sme_variable_name = arcpy.Parameter(            displayName="Input SME Survey Variable Name Value",            name="sme_variable_name",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 8        sme_div_name_fld = arcpy.Parameter(            displayName="Input SME Survey Division Name Field",            name="sme_div_name_fld",            datatype="Field",            parameterType="Optional",            direction="Input")        sme_div_name_fld.parameterDependencies = [in_sme_survey_rows.name]        # param 9        sme_likelihood_fld = arcpy.Parameter(            displayName="Input SME Survey Likelihood Field",            name="sme_likelihood_fld",            datatype="Field",            parameterType="Optional",            direction="Input")        sme_likelihood_fld.parameterDependencies = [in_sme_survey_rows.name]        # param 10        sme_survey_details = arcpy.Parameter(            displayName="Division Vintage Plastics",            name="sme_survey_details",            datatype="GPValueTable",            parameterType="Optional",            direction="Input")        sme_survey_details.columns = [['GPString', 'Division Name'],                                        ['GPDouble', 'Likelihood Value']]        params = [in_dist_mains, material_fld, plastic_material_val,                    route_id_fld, div_name_fld, in_sme_survey_rows, sme_variable_fld, sme_variable_name,                    sme_div_name_fld, sme_likelihood_fld,                    sme_survey_details]        # param 11        out_gdb = arcpy.Parameter(            displayName="Output GDB",            name="out_gdb",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 12        out_lightning_table = arcpy.Parameter(            displayName="Output Patrol Leak Surveys Table",            name="out_lightning_table",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 13        gp_messages = arcpy.Parameter(            displayName="Geoprocessing Messages",            name="gp_messages",            datatype="GPString",            parameterType="Optional",            direction="Output")        # param 14        status = arcpy.Parameter(            displayName="Tool Status",            name="status",            datatype="GPString",            parameterType="Optional",            direction="Output")         # param 15        output_table = arcpy.Parameter(            displayName="Output Linear Events Table",            name="output_table",            datatype="GPTableView",            parameterType="Optional",            direction="Output")        # param 16        portal_ulr = arcpy.Parameter(            displayName="ArcGIS Portal URL",            name="portal_ulr",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 17        portal_username = arcpy.Parameter(            displayName="ArcGIS Portal User Name",            name="portal_username",            datatype="GPString",            parameterType="Optional",            direction="Input")        # param 18        portal_password = arcpy.Parameter(            displayName="ArcGIS Portal Password",            name="portal_password",            datatype="GPStringHidden",            parameterType="Optional",            direction="Input")        params += [out_gdb, out_lightning_table, gp_messages, status, output_table,                            portal_ulr, portal_username, portal_password]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        return    def signin_portal(self, portal_url, username, password):        """            Login to the ArcGIS Portal to access input data sources            portal_url: ArcGIS Portal URL            username: User name            password: Password        """        if arcpy.GetSigninToken() is None:            try:                if username is not None and  password is not None:                    arcpy.SignInToPortal(portal_url, username, password)                else:                    arcpy.SignInToPortal(portal_url)                arcpy.AddMessage("ArcGIS Portal Login Successful.")            except Exception as e:                arcpy.AddError("ArcGIS Portal Login Failed!."                                "\n{}".format(arcpy.GetMessages(2)))                raise    def preprocess_distmains(self, infc, gdb, dist_mains_routes, unique_fld):        """            Creates online distribution mains features from input distribution mains features            infc: Input distribution mains features            gdb: Path of the geodatabase to save output online distribution mains features            dist_mains_routes: Name of the output online distribution mains feature class            unique_fld: Name of the GUID column to be added to output online distribution mains feature class        """        try:            dist_mains = os.path.join(gdb, "DistMains")            arcpy.AddMessage("Copy Features Dist Mains From Portal...")            from_meas_fld = "FROM_MEASURE"            to_meas_fld = "TO_MEASURE"            arcpy.management.CopyFeatures(in_features=infc,                                          out_feature_class=dist_mains,                                          config_keyword="",                                          spatial_grid_1=None,                                          spatial_grid_2=None,                                          spatial_grid_3=None)            field_list = arcpy.ListFields(dist_mains, from_meas_fld)            if len(field_list) > 0:                arcpy.AddMessage(f"Field '{from_meas_fld}' already exists.")            else:                # Add a new GUID field                arcpy.AddField_management(dist_mains, from_meas_fld, "Double")                arcpy.AddMessage(f"Field '{from_meas_fld}' added successfully.")            arcpy.AddMessage("Calculate Geometry Attributes...")            arcpy.management.CalculateGeometryAttributes(in_features=dist_mains,                                                         geometry_property=to_meas_fld + " LENGTH_GEODESIC",                                                         length_unit="FEET_US",                                                         area_unit="",                                                         coordinate_system=None,                                                         coordinate_format="SAME_AS_INPUT")            field_list = arcpy.ListFields(dist_mains, unique_fld)            if len(field_list) > 0:                arcpy.AddMessage(f"Field '{unique_fld}' already exists.")            else:                # Add a new GUID field                arcpy.AddField_management(dist_mains, unique_fld, "GUID")                arcpy.AddMessage(f"Field '{unique_fld}' added successfully.")            # Create an update cursor to calculate GUID values            with arcpy.da.UpdateCursor(dist_mains, [from_meas_fld, unique_fld]) as cursor:                for row in cursor:                    row[0] = 0                    # Generate a new GUID value                    guid_value = str(uuid.uuid4())                    # Update the row with the new GUID                    row[1] = guid_value                    cursor.updateRow(row)            arcpy.AddMessage(f"GUID values calculated and populated in the '{unique_fld}' field.")            arcpy.AddMessage("Creating route features...")            # create routes            arcpy.lr.CreateRoutes(                in_line_features=dist_mains,                route_id_field=unique_fld,                out_feature_class=dist_mains_routes,                measure_source="TWO_FIELDS",                from_measure_field=from_meas_fld,                to_measure_field=to_meas_fld,                coordinate_priority="UPPER_LEFT",                measure_factor=1,                measure_offset=0,                ignore_gaps="IGNORE",                build_index="INDEX"            )            arcpy.AddMessage("Join Field...")            arcpy.management.JoinField(                in_data=dist_mains_routes,                in_field=unique_fld,                join_table=dist_mains,                join_field=unique_fld,                fields=None,                fm_option="NOT_USE_FM",                field_mapping=None,                index_join_fields="NO_INDEXES"            )            field_list = arcpy.ListFields(dist_mains_routes, unique_fld+"_1")            if len(field_list) > 0:                arcpy.AddMessage("Delete Field...")                arcpy.management.DeleteField(dist_mains_routes,[unique_fld+"_1"])        except Exception as e:            raise    def add_message(self, parameters, msg, gp_msg_no, status_no):        try:            parameters[gp_msg_no].value = parameters[gp_msg_no].valueAsText + "\n " + msg            arcpy.AddMessage(msg)        except Exception as e:            parameters[gp_msg_no].value = parameters[gp_msg_no].valueAsText + "\n " + str(e)            parameters[status_no].value = "Error"            raise    def execute(self, parameters, messages):        """The source code of the tool."""        dist_mains = parameters[0].value        material_fld = parameters[1].valueAsText        plastic_material_val = int(parameters[2].value)        route_id_fld = parameters[3].valueAsText        div_name_fld = parameters[4].valueAsText        in_sme_survey_rows = parameters[5].value        sme_variable_fld = parameters[6].valueAsText        sme_variable_name = parameters[7].valueAsText        sme_div_name_fld = parameters[8].valueAsText        sme_likelihood_fld = parameters[9].valueAsText        sme_survey_details = parameters[10].value        out_gdb_name = parameters[11].valueAsText        out_lightning_table = parameters[12].valueAsText        gp_msg_no = 13        status_no = 14        parameters[15].value = os.path.join(out_gdb_name, out_lightning_table)        portal_ulr = parameters[16].value        portal_username = parameters[17].value        portal_password = parameters[18].value        linear_events_table = os.path.join(out_gdb_name, out_lightning_table)        linear_events_fc = os.path.join(out_gdb_name, out_lightning_table + "_FC")        dist_mains_routes =  os.path.join(out_gdb_name, DIST_MAINS_FC_NAME)        sme_survey_temp = os.path.join(out_gdb_name, "SME_Input_Surevy_Rows")        try:            parameters[gp_msg_no].value = "Starting..."            parameters[status_no].value = ""            # sign in to portal            self.signin_portal(portal_ulr, portal_username, portal_password)            # check in dist mains exist in the file geodatabase            # if not, create online distribution feature class            self.add_message(parameters, "Checking Input Dist Mains...", gp_msg_no, status_no)            if not arcpy.Exists(dist_mains_routes):                self.preprocess_distmains(dist_mains, out_gdb_name, dist_mains_routes, route_id_fld)            dist_plastic = arcpy.management.SelectLayerByAttribute(in_layer_or_view=dist_mains_routes,                            selection_type="NEW_SELECTION",                            where_clause=f"{material_fld} IN ({plastic_material_val})",                            invert_where_clause=None)            self.add_message(parameters,"Copy Features Dins Mains...", gp_msg_no, status_no)            arcpy.management.CopyFeatures(in_features=dist_plastic,                                            out_feature_class=linear_events_fc,                                            config_keyword="",                                            spatial_grid_1=None,                                            spatial_grid_2=None,                                            spatial_grid_3=None)            self.add_message(parameters,"Add Fields Dist Mains...", gp_msg_no, status_no)            arcpy.management.AddFields(linear_events_fc, DIST_MAINS_FIELD_DESCRIPTION)    #         sme_survey_rows_arr = None            sme_survey_details_arr = {}            # check if SME input servey parameters are provided            if in_sme_survey_rows is not None and sme_variable_fld is not None and sme_variable_name is not None \                                                and sme_div_name_fld is not None and sme_likelihood_fld is not None:                self.add_message(parameters,"Copy Rows SME Input Survey...", gp_msg_no, status_no)                arcpy.management.CopyRows(in_rows=in_sme_survey_rows,                                            out_table=sme_survey_temp,                                            config_keyword="")                # create numpy array from input SME input servey rows                fields = [sme_div_name_fld, sme_likelihood_fld]                sme_survey_rows_arr = arcpy.da.TableToNumPyArray(sme_survey_temp, fields,                                            where_clause = f"{sme_variable_fld} = '{sme_variable_name}'",                                            null_value=-9999)                for row in  sme_survey_rows_arr:                    div = row[0].upper().strip()                    sme_survey_details_arr[div] = {NEW_FIELD_NAME: float(row[1])}            # check if SME servey details parameters are provided            elif sme_survey_details is not None:                for row in sme_survey_details:                    if row[0]:                        div = row[0].upper().strip()                        sme_survey_details_arr[div] = {NEW_FIELD_NAME: float(row[1])}            else:                self.add_message(parameters,"No SME Input Survey Details Found...", gp_msg_no, status_no)                self.add_message(parameters,"Error", gp_msg_no, status_no)                return            arcpy.AddMessage(sme_survey_details_arr)            # Update Dist mains            self.add_message(parameters,"Updating Dist Mains...", gp_msg_no, status_no)            flds = [div_name_fld, NEW_FIELD_NAME]            with arcpy.da.UpdateCursor(linear_events_fc, flds) as cursor:                for row in cursor:                    div_name = row[0]                    if not div_name:                        div_name = "Default"                    if div_name.upper() in sme_survey_details_arr:                        values = sme_survey_details_arr[div_name.upper()]                        row[1] = values[NEW_FIELD_NAME]                    else:                        row[1] = -9999                    cursor.updateRow(row)            self.add_message(parameters,"Creating output linear events table...", gp_msg_no, status_no)            arcpy.conversion.ExportTable(in_table=linear_events_fc,out_table=linear_events_table)            self.add_message(parameters,"Completed!", gp_msg_no, status_no)            parameters[status_no].value = "Success"        except Exception as e:            parameters[status_no].value = "Error"            self.add_message(parameters,  str(e), gp_msg_no, status_no)            raise        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return